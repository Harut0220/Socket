<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Video Call App</title>
  </head>
  <body>
    <h1>Video Call App</h1>
    <video id="localVideo" autoplay></video>
    <video id="remoteVideo" autoplay></video>
    <input type="text" id="roomId" placeholder="Enter Room ID" />
    <input
      type="text"
      id="targetSocketId"
      placeholder="Enter Target Socket ID"
    />
    <button onclick="joinRoom()">Join Room</button>
    <button onclick="startCall()">Start Call</button>
    <button onclick="endCall()">End Call</button>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io();
      let localStream;
      const localVideo = document.getElementById("localVideo");
      const remoteVideo = document.getElementById("remoteVideo");
      const roomIdInput = document.getElementById("roomId");
      const targetSocketIdInput = document.getElementById("targetSocketId");

      async function joinRoom() {
        const roomId = roomIdInput.value;
        if (!roomId) {
          alert("Please enter a room ID");
          return;
        }

        socket.emit("joinRoom", roomId);
      }

      async function startCall() {
        const targetSocketId = targetSocketIdInput.value;
        if (!targetSocketId) {
          alert("Please enter a target socket ID");
          return;
        }
      // Assume localStream is a MediaStream object obtained from getUserMedia

// Create an RTCPeerConnection object
localStream= await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
const peerConnection = new RTCPeerConnection();

// Add the local stream to the peer connection
localStream.getTracks().forEach(track => {
    peerConnection.addTrack(track, localStream);
});
localVideo.srcObject = localStream;

// Create an offer
const offer = await peerConnection.createOffer();
await peerConnection.setLocalDescription(offer);

// Now you can use the offer for signaling, for example, sending it to the remote peer


        socket.emit("offer", offer, targetSocketId);
      }

      socket.on("offer", async (offer, senderSocketId) => {
        await localStream.setRemoteDescription(offer);

        const answer = await localStream.createAnswer();
        await localStream.setLocalDescription(answer);

        socket.emit("answer", answer, senderSocketId);
      });

      socket.on("answer", async (answer) => {
        await localStream.setRemoteDescription(answer);
      });

      socket.on("icecandidate", async (candidate) => {
        await localStream.addIceCandidate(candidate);
      });

      async function endCall() {
        localStream.getTracks().forEach((track) => track.stop());
        localVideo.srcObject = null;
        remoteVideo.srcObject = null;
      }
    </script>
  </body>
</html>
